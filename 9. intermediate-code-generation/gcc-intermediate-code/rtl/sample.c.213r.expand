
;; Function main (main, funcdef_no=10, decl_uid=1880, cgraph_uid=10, symbol_order=10)

main ()
{
  int i;
  int harsh;
  int D.1888;
  int _9;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  harsh_3 = 1;
  i_4 = 0;
  goto <bb 4>;
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  harsh_5 = harsh_1 + 1;
  i_6 = i_2 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # harsh_1 = PHI <harsh_3(2), harsh_5(3)>
  # i_2 = PHI <i_4(2), i_6(3)>
  if (i_2 <= 9)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  printf ("%d", harsh_1);
  _9 = 0;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3>:
  return _9;
;;    succ:       EXIT

}



Partition map 

Partition 1 (harsh_1 - 1 )
Partition 2 (i_2 - 2 )
Partition 3 (harsh_3 - 3 )
Partition 4 (i_4 - 4 )
Partition 5 (harsh_5 - 5 )
Partition 6 (i_6 - 6 )
Partition 9 (_9 - 9 )
Partition 10 (_10(D) - 10 )


Partition map 

Partition 0 (harsh_1 - 1 )
Partition 1 (i_2 - 2 )
Partition 2 (harsh_3 - 3 )
Partition 3 (i_4 - 4 )
Partition 4 (harsh_5 - 5 )
Partition 5 (i_6 - 6 )
Partition 6 (_10(D) - 10 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) harsh_1 <-> harsh_3
(2147483646, 0) i_2 <-> i_4
(2147483646, 0) harsh_1 <-> harsh_5
(2147483646, 0) i_2 <-> i_6

Partition map 

Partition 0 (harsh_1 - 1 )
Partition 1 (i_2 - 2 )
Partition 2 (harsh_3 - 3 )
Partition 3 (i_4 - 4 )
Partition 4 (harsh_5 - 5 )
Partition 5 (i_6 - 6 )
Partition 6 (_10(D) - 10 )

Coalesce list: (1)harsh_1 & (3)harsh_3 [map: 0, 2] : Success -> 0
Coalesce list: (2)i_2 & (4)i_4 [map: 1, 3] : Success -> 1
Coalesce list: (1)harsh_1 & (5)harsh_5 [map: 0, 4] : Success -> 0
Coalesce list: (2)i_2 & (6)i_6 [map: 1, 5] : Success -> 1
Coalesce list: (2)i_2 & (6)i_2: Already Coalesced.
Coalesce list: (2)i_2 & (4)i_2: Already Coalesced.
Coalesce list: (1)harsh_1 & (5)harsh_1: Already Coalesced.
Coalesce list: (1)harsh_1 & (3)harsh_1: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (harsh_1 - 1 3 5 )
Partition 1 (i_2 - 2 4 6 )
Partition 2 (_9 - 9 )
Partition 3 (_10(D) - 10 )

main ()
{
  int i;
  int harsh;
  int D.1888;
  int _9;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  harsh_3 = 1;
  i_4 = 0;
  goto <bb 4>;
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  harsh_5 = harsh_1 + 1;
  i_6 = i_2 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # harsh_1 = PHI <harsh_3(2), harsh_5(3)>
  # i_2 = PHI <i_4(2), i_6(3)>
  if (i_2 <= 9)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  printf ("%d", harsh_1);
  _9 = 0;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3>:
  return _9;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; harsh_3 = 1;

(insn 6 5 0 (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])
        (const_int 1 [0x1])) sample.c:3 -1
     (nil))

;; i_4 = 0;

(insn 7 6 0 (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
        (const_int 0 [0])) sample.c:4 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; harsh_5 = harsh_1 + 1;

(insn 11 10 0 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sample.c:5 -1
     (nil))

;; i_6 = i_2 + 1;

(insn 12 11 0 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sample.c:4 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 13 12 14 2 "" [0 uses])

(note 14 13 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_2 <= 9)

(insn 16 14 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
            (const_int 9 [0x9]))) sample.c:4 -1
     (nil))

(jump_insn 17 16 0 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) sample.c:4 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; printf ("%d", harsh_1);

(insn 19 18 20 (set (reg:SI 89)
        (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])) sample.c:7 -1
     (nil))

(insn 20 19 21 (set (mem:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 89)) sample.c:7 -1
     (nil))

(insn 21 20 22 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC0") [flags 0x2]  <var_decl 067fa420 *LC0>)) sample.c:7 -1
     (nil))

(call_insn 22 21 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 06787700 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) sample.c:7 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))

;; _9 = 0;

(insn 23 22 0 (set (reg:SI 87 [ _9 ])
        (const_int 0 [0])) <built-in>:0 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; <L3>:

(code_label 24 23 25 4 "" [0 uses])

(note 25 24 0 NOTE_INSN_BASIC_BLOCK)

;; return _9;

(insn 26 25 27 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _9 ])) <built-in>:0 -1
     (nil))

(jump_insn 27 26 28 (set (pc)
        (label_ref 0)) <built-in>:0 -1
     (nil))

(barrier 28 27 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.
Removing jump 27.
Merging block 8 into block 6...
Merged blocks 6 and 8.
Merged 6 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 3 2 6 2 (call (mem:QI (symbol_ref:SI ("__main") [flags 0x43]) [0  S1 A8])
        (const_int 0 [0])) sample.c:2 -1
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (nil))
(insn 6 3 7 2 (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])
        (const_int 1 [0x1])) sample.c:3 -1
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
        (const_int 0 [0])) sample.c:4 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 13)) sample.c:4 -1
     (nil)
 -> 13)
;;  succ:       5

(barrier 9 8 15)
;; basic block 4, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 15 9 10 4 3 "" [1 uses])
(note 10 15 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                        (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                            (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sample.c:5 -1
     (nil))
(insn 12 11 13 4 (parallel [
            (set (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                            (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) sample.c:4 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 13 12 14 5 2 "" [1 uses])
(note 14 13 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 16 14 17 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -8 [0xfffffffffffffff8])) [1 i+0 S4 A32])
            (const_int 9 [0x9]))) sample.c:4 -1
     (nil))
(jump_insn 17 16 18 5 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 15)
            (pc))) sample.c:4 -1
     (nil)
 -> 15)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 18 17 19 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 6 (set (reg:SI 89)
        (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 harsh+0 S4 A32])) sample.c:7 -1
     (nil))
(insn 20 19 21 6 (set (mem:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 89)) sample.c:7 -1
     (nil))
(insn 21 20 22 6 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC0") [flags 0x2]  <var_decl 067fa420 *LC0>)) sample.c:7 -1
     (nil))
(call_insn 22 21 23 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 06787700 printf>) [0 __builtin_printf S1 A8])
            (const_int 8 [0x8]))) sample.c:7 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (expr_list:SI (use (mem:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 23 22 26 6 (set (reg:SI 87 [ _9 ])
        (const_int 0 [0])) <built-in>:0 -1
     (nil))
(insn 26 23 30 6 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _9 ])) <built-in>:0 -1
     (nil))
(insn 30 26 31 6 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) sample.c:8 -1
     (nil))
(insn 31 30 0 6 (use (reg/i:SI 0 ax)) sample.c:8 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

